From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Thu, 5 Sep 2024 11:04:23 +0200
Subject: [PATCH] Exploit: Fix inventory/chunk bans and item lag


diff --git a/src/main/java/abomination/config/Performance.java b/src/main/java/abomination/config/Performance.java
index 7b5874705356e2871ac94b3e58c922eb25851ef5..e61628742e086783a2d4046110bc8ddc96171a5e 100644
--- a/src/main/java/abomination/config/Performance.java
+++ b/src/main/java/abomination/config/Performance.java
@@ -5,4 +5,5 @@ public class Performance {
     public static boolean disableDolphinSwimToTreasure = false;
     public static boolean disablePlayerStats = false;
     public static boolean optimizeShulkerMaxStackSize = false; // Optimizes hoppers
+    public static boolean sendSimplifiedShulkerContents = false; // Speeds up opening/sending of chests of lagbooks. Saves upload. Shouldn't affect vanilla clients, only utility mods.
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index 8cca2ac616a2c80268c96b9f95e33f834a0fc8fd..d3d412b3a9bb6ba2ef5ee784b83f0f17016b0684 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -23,9 +23,11 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
         this.items = NonNullList.withSize(contents.size(), ItemStack.EMPTY);
 
         for (int i = 0; i < contents.size(); i++) {
+            if (abomination.config.Performance.sendSimplifiedShulkerContents) this.items.set(i, contents.get(i).slimmedDownCopy()); else // Abomination
             this.items.set(i, contents.get(i).copy());
         }
 
+        if (abomination.config.Performance.sendSimplifiedShulkerContents) this.carriedItem = cursorStack.slimmedDownCopy(); else // Abomination
         this.carriedItem = cursorStack.copy();
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index 63f6a2437da9363786b55af0a7cbc5373232d35b..a673644f904fd6aa2bda90c284c76fd6648152a1 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -21,6 +21,7 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
         this.containerId = syncId;
         this.stateId = revision;
         this.slot = slot;
+        if (abomination.config.Performance.sendSimplifiedShulkerContents) this.itemStack = stack.slimmedDownCopy(); else // Abomination
         this.itemStack = stack.copy();
     }
 
@@ -31,6 +32,19 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
         this.itemStack = ItemStack.OPTIONAL_STREAM_CODEC.decode(buf);
     }
 
+    // Abomination start - Handle large items disconnecting clients
+    @Override
+    public boolean hasLargePacketFallback() {
+        return true;
+    }
+
+    @Override
+    public boolean packetTooLarge(net.minecraft.network.Connection manager) {
+        manager.send(new ClientboundContainerSetSlotPacket(this.containerId, this.stateId, this.slot, ItemStack.makeVerySimplifiedItem(this.itemStack)));
+        return true;
+    }
+    // Abomination end - Handle large items disconnecting clients
+
     private void write(RegistryFriendlyByteBuf buf) {
         buf.writeByte(this.containerId);
         buf.writeVarInt(this.stateId);
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 249b642bde7c7e1c053dfdcae86fb30a98232319..1a9a7eba444623ae301aed147820d297234bc715 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -1400,4 +1400,66 @@ public final class ItemStack implements DataComponentHolder {
     public boolean canBeHurtBy(DamageSource source) {
         return !this.has(DataComponents.FIRE_RESISTANT) || !source.is(DamageTypeTags.IS_FIRE);
     }
+
+    // Abomination start
+    static ItemEnchantments simpleEnchantment = null;
+
+    public static ItemStack makeVerySimplifiedItem(ItemStack stack) {
+        ItemStack newItemStack = new ItemStack(stack.item);
+        newItemStack.count = stack.count;
+
+        Component component = stack.get(DataComponents.CUSTOM_NAME);
+        if (component != null) newItemStack.set(DataComponents.CUSTOM_NAME, component);
+        else {
+            component = stack.get(DataComponents.ITEM_NAME);
+            if (component != null) newItemStack.set(DataComponents.ITEM_NAME, component);
+        }
+
+        var c2 = stack.get(DataComponents.ENCHANTMENTS);
+        if (c2 != null) newItemStack.set(DataComponents.ENCHANTMENTS, c2);
+
+        return newItemStack;
+    }
+
+    public ItemStack slimmedDownCopy() {
+        if (this.toString().contains("shulker_box")) {
+            ItemStack stack = this.copy(false);
+            stack.components = new PatchedDataComponentMap(DataComponentMap.EMPTY);
+            Component component = this.get(DataComponents.CUSTOM_NAME);
+            if (component != null) stack.set(DataComponents.CUSTOM_NAME, component);
+            else {
+                component = this.get(DataComponents.ITEM_NAME);
+                if (component != null) stack.set(DataComponents.ITEM_NAME, component);
+            }
+            var c2 = this.get(DataComponents.ENCHANTMENTS);
+            if (c2 != null) stack.set(DataComponents.ENCHANTMENTS, c2);
+
+            ItemContainerContents itemContainerContents = (ItemContainerContents) this.get(DataComponents.CONTAINER);
+            if (itemContainerContents != null) {
+                java.util.ArrayList<ItemStack> newStacks = new java.util.ArrayList();
+                NonNullList<ItemStack> itemContainerItems = itemContainerContents.getItems();
+                for (int i = 0 ; i < itemContainerItems.size() ; i++) {
+                    ItemStack item = itemContainerItems.get(i);
+
+                    if (item == null) continue;
+                    ItemStack newItem = new ItemStack(item.item);
+                    newItem.count = item.count;
+                    if (item.isEnchanted()) {
+                        if (simpleEnchantment == null) {
+                            ItemStack simpleEnchantmentItem = new ItemStack(Items.GOLDEN_SWORD);
+                            simpleEnchantmentItem.enchant(org.bukkit.craftbukkit.enchantments.CraftEnchantment.bukkitToMinecraftHolder(org.bukkit.enchantments.Enchantment.LURE), 1);
+                            simpleEnchantment = simpleEnchantmentItem.get(DataComponents.ENCHANTMENTS);
+                        }
+                        newItem.set(DataComponents.ENCHANTMENTS, simpleEnchantment);
+                    }
+
+                    newStacks.add(newItem);
+                }
+                stack.set(DataComponents.CONTAINER, ItemContainerContents.fromItems(newStacks));
+            }
+            return stack;
+        }
+        return this;
+    }
+    // Abomination end
 }
diff --git a/src/main/java/net/minecraft/world/item/component/ItemContainerContents.java b/src/main/java/net/minecraft/world/item/component/ItemContainerContents.java
index d8206c6de4a4c7dc6b904e5e311342cb9a845e9c..4dda7f39a1f11f3278a2bcdb2ded887ca5a67a28 100644
--- a/src/main/java/net/minecraft/world/item/component/ItemContainerContents.java
+++ b/src/main/java/net/minecraft/world/item/component/ItemContainerContents.java
@@ -154,4 +154,10 @@ public final class ItemContainerContents {
                     .apply(instance, ItemContainerContents.Slot::new)
         );
     }
+
+    // Abomination start
+    public NonNullList<ItemStack> getItems() {
+        return items;
+    }
+    // Abomination end
 }
