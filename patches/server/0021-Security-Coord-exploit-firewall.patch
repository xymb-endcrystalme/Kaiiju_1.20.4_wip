From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xymb <xymb@endcrystal.me>
Date: Mon, 2 Sep 2024 12:22:50 +0200
Subject: [PATCH] Security: Coord exploit firewall


diff --git a/src/main/java/abomination/PacketFirewall.java b/src/main/java/abomination/PacketFirewall.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d47ab6e5f2e45acb350d06a4fafdc76033086b7
--- /dev/null
+++ b/src/main/java/abomination/PacketFirewall.java
@@ -0,0 +1,182 @@
+package abomination;
+
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.network.protocol.Packet;
+import org.slf4j.Logger;
+import com.mojang.logging.LogUtils;
+import java.lang.reflect.Field;
+import net.minecraft.world.phys.Vec3;
+import java.util.Optional;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.world.level.ChunkPos;
+
+public class PacketFirewall {
+    private static final Logger LOGGER = LogUtils.getLogger();
+
+    private static boolean closeEnoughToPlayerClientbound(Packet<?> packet, ServerPlayer player, double x, double z) {
+        double diffX = player.getX() - x;
+        double diffZ = player.getZ() - z;
+        if (Math.sqrt(diffX * diffX + diffZ * diffZ) > abomination.config.CoordExploitFirewall.clientbound.packetDistanceLimit && (Math.abs(x) > 16 && Math.abs(z) > 16)) return false;
+        return true;
+    }
+
+    private static boolean closeEnoughToPlayerServerbound(Packet<?> packet, ServerPlayer player, double x, double z) {
+        double diffX = player.getX() - x;
+        double diffZ = player.getZ() - z;
+
+        if (Math.abs(diffX) < 16 && Math.abs(diffZ) < 16) return true;
+
+        if (Math.sqrt(diffX * diffX + diffZ * diffZ) > abomination.config.CoordExploitFirewall.serverbound.packetDistanceLimit && (Math.abs(x) > 16 && Math.abs(z) > 16)) {
+            if (abomination.config.CoordExploitFirewall.serverbound.verbose)
+                LOGGER.error("Abomination NoCom " + packet.getClass().getSimpleName() + " " + player.displayName + " PlayerXZ: " + player.getX() + " " + player.getZ() + " -> NoComXZ: "  + x + " " + z + " - Distance: " + String.valueOf(Math.sqrt(diffX * diffX + diffZ * diffZ)));
+            return false;
+        }
+        return true;
+    }
+
+    private static boolean serverboundPacketIsCoordExploitSafe(ServerPlayer player, Packet<?> p) {
+        boolean closeEnough = true;
+        if (p instanceof ServerboundUseItemOnPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getHitResult().getBlockPos().getX(), packet.getHitResult().getBlockPos().getZ());
+        } else if (p instanceof ServerboundPlayerActionPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundSignUpdatePacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundMoveVehiclePacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, (int)packet.getX(), (int)packet.getZ());
+        } else if (p instanceof ServerboundSetCommandBlockPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundSetStructureBlockPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundSetJigsawBlockPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundJigsawGeneratePacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, packet.getPos().getX(), packet.getPos().getZ());
+        } else if (p instanceof ServerboundMovePlayerPacket packet) {
+            closeEnough = closeEnoughToPlayerServerbound(packet, player, (int)packet.getX(0), (int)packet.getZ(0));
+        }
+
+        return closeEnough;
+    }
+
+    public static boolean serverboundFirewall(Packet<?> packet, ServerPlayer player) {
+        if (abomination.config.CoordExploitFirewall.enabled == false) return true;
+        if (abomination.config.CoordExploitFirewall.serverbound.packetDistanceLimit <= 0) return true;
+
+        if (!serverboundPacketIsCoordExploitSafe(player, packet)) {
+            return false;
+        }
+
+//        System.out.println("Packet " + packet);
+
+        return true;
+    }
+
+    private static boolean packetIsCoordExplotSafe(ServerPlayer player, Packet<?> packet) {
+        boolean closeEnough = true;
+        if (packet instanceof net.minecraft.network.protocol.game.ClientboundBundlePacket p) {
+//            System.out.println("BUNDLE! " + p);
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundAddEntityPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.x, p.z);
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundExplodePacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockEventPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLevelEventPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getPos().getX(), p.getPos().getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundSoundPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX(), p.getZ());
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundChunksBiomesPacket p) {
+            for(int[] coordinatePair : p.getChunkCoordinates()) {
+                int x = coordinatePair[0];
+                int z = coordinatePair[1];
+                if (closeEnoughToPlayerClientbound(packet, player, x, z) == false) closeEnough = false;
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundDamageEventPacket p) {
+            Optional<Vec3> sourcePosition = p.sourcePosition();
+            if (sourcePosition.isPresent()) {
+                Vec3 pos = sourcePosition.get();
+                closeEnough = closeEnoughToPlayerClientbound(packet, player, pos.x, pos.z);
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX() * 16, p.getZ() * 16);
+            if (closeEnough) {
+                if (player.packetFirewallValidCoords == null) player.packetFirewallValidCoords = new it.unimi.dsi.fastutil.longs.LongOpenHashSet(128);
+                player.packetFirewallValidCoords.add(p.getX() * 2000000 + p.getZ());
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket p) {
+            ChunkPos pos = p.pos();
+            closeEnough = false;
+            if (player.packetFirewallValidCoords != null) {
+                if (player.packetFirewallValidCoords.contains(pos.x * 2000000 + pos.z)) {
+                    player.packetFirewallValidCoords.remove(pos.x * 2000000 + pos.z);
+                    closeEnough = true;
+                }
+            }
+            if (closeEnough == false) {
+                closeEnough = closeEnoughToPlayerClientbound(packet, player, pos.x * 16, pos.z * 16);
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLevelChunkPacketData p) {
+            // Unnecessary, this packet is only embedded in ClientboundLevelChunkWithLightPacket
+            for(int[] coordinatePair : p.getAllBlockEntityCoordinatesXZ()) {
+                int x = coordinatePair[0];
+                int z = coordinatePair[1];
+                if (closeEnoughToPlayerClientbound(packet, player, x, z) == false) closeEnough = false;
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket p) {
+            for(int[] coordinatePair : p.getAllBlockEntityCoordinatesXZ()) {
+                int x = coordinatePair[0];
+                int z = coordinatePair[1];
+                if (closeEnoughToPlayerClientbound(packet, player, x, z) == false) closeEnough = false;
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLightUpdatePacketData p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.chunkPos.getMiddleBlockX() * 16, p.chunkPos.getMiddleBlockZ() * 16);
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundLightUpdatePacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX() * 16, p.getZ() * 16);
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket p) {
+            closeEnough = closeEnoughToPlayerClientbound(packet, player, p.getX() * 16, p.getZ() * 16);
+        } else {
+//            LOGGER.info("Unknown packet " + packet);
+        }
+        return closeEnough;
+    }
+
+
+    public static boolean clientboundFirewall(Packet<?> packet, ServerPlayer player) {
+        if (abomination.config.CoordExploitFirewall.enabled == false) return true;
+        if (abomination.config.CoordExploitFirewall.clientbound.packetDistanceLimit <= 0) return true;
+
+        if (!packetIsCoordExplotSafe(player, packet)) {
+            if (abomination.config.CoordExploitFirewall.serverbound.verbose)
+                LOGGER.error("PACKET BLOCKED " + packet);
+            return false;
+        }
+
+//        System.out.println("Packet " + packet);
+
+        return true;
+    }
+
+}
diff --git a/src/main/java/abomination/config/CoordExploitFirewall.java b/src/main/java/abomination/config/CoordExploitFirewall.java
index 0a4a217edae02892e09e1a26fa2dbe62ea672024..0c1e9bc81421cf5d659d5c95b9b5fcf0735bb8b4 100644
--- a/src/main/java/abomination/config/CoordExploitFirewall.java
+++ b/src/main/java/abomination/config/CoordExploitFirewall.java
@@ -1,4 +1,23 @@
 package abomination.config;
 
 public class CoordExploitFirewall {
+    public static boolean enabled = false;
+
+    public static class clientbound { // Block incorrectly addressed (too far away) packets
+        public static int packetDistanceLimit = 1024; // 0 completely disables Clientbound firewall
+        public static boolean verbose = false;
+    }
+
+    public static class serverbound { // Block NoCOMs
+        public static int packetDistanceLimit = 128; // 0 completely disables Serverbound firewall
+        public static boolean verbose = false;
+    }
+
+    public static class options {
+        public static boolean disableClientboundSetDefaultSpawnPositionPacket = true; // AFAIK this packet basically does nothing
+
+        public static boolean getDisableClientboundSetDefaultSpawnPositionPacket() {return CoordExploitFirewall.enabled && disableClientboundSetDefaultSpawnPositionPacket;}
+    }
+
+
 }
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index b0136591a37734493a310332b1f56f1259f913af..6574343d0f77ac8122cad6c005f0aada22007f41 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -475,6 +475,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         if (!connected && !this.preparing) {
             return;
         }
+        if (abomination.PacketFirewall.clientboundFirewall(packet, this.getPlayer()) == false) return; // Abomination
 
         packet.onPacketDispatch(this.getPlayer());
         if (false && connected && (InnerUtil.canSendImmediate(this, packet) // Folia - region threading - connection fixes
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
index 3c1cad5c2b34047cec44734ba4e8348cabec6f80..2cf7d378972a3195155c6a8f539e643a38122c23 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundChunksBiomesPacket.java
@@ -82,4 +82,18 @@ public record ClientboundChunksBiomesPacket(List<ClientboundChunksBiomesPacket.C
             buf.writeByteArray(this.buffer);
         }
     }
+
+    // Abomination start
+    public List<int[]> getChunkCoordinates() {
+        List<int[]> chunkCoordinates = new java.util.ArrayList<>();
+
+        for(ChunkBiomeData data : this.chunkBiomeData) {
+            ChunkPos chunkPos = data.pos();
+            int[] coordinatePair = {chunkPos.x, chunkPos.z};
+            chunkCoordinates.add(coordinatePair);
+        }
+
+        return chunkCoordinates;
+    }
+    // Abomination end
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 0a8d07bf68b0ceabd13c70196d357fce79dcc2c3..966f7bfe4826b48ba0453b7bbc5a49113072ebe4 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -197,4 +197,16 @@ public class ClientboundLevelChunkPacketData {
     public interface BlockEntityTagOutput {
         void accept(BlockPos pos, BlockEntityType<?> type, @Nullable CompoundTag nbt);
     }
+
+    // Abomination start
+    public List<int[]> getAllBlockEntityCoordinatesXZ() {
+        List<int[]> coordinates = new java.util.ArrayList<>();
+        for(ClientboundLevelChunkPacketData.BlockEntityInfo blockEntityInfo : this.blockEntitiesData) {
+            int x = SectionPos.sectionRelative(blockEntityInfo.packedXZ >> 4);
+            int z = SectionPos.sectionRelative(blockEntityInfo.packedXZ);
+            coordinates.add(new int[]{x, z});
+        }
+        return coordinates;
+    }
+    // Abomination end
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
index 3840878076b2478148d12b5a0b93a82786fa9298..dacb3cc17e24a84bce53fb521a15c21de69b656b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLightUpdatePacketData.java
@@ -22,8 +22,10 @@ public class ClientboundLightUpdatePacketData {
     private final BitSet emptyBlockYMask;
     private final List<byte[]> skyUpdates;
     private final List<byte[]> blockUpdates;
+    public ChunkPos chunkPos; // Abomination
 
     public ClientboundLightUpdatePacketData(ChunkPos pos, LevelLightEngine lightProvider, @Nullable BitSet skyBits, @Nullable BitSet blockBits) {
+        this.chunkPos = pos; // Abomination
         this.skyYMask = new BitSet();
         this.blockYMask = new BitSet();
         this.emptySkyYMask = new BitSet();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
index 157672e1a1fbd976caa15a91633b5e6bc635c5ff..dc12c83cd9b8d1f6b36e12245bd6344315dbd54e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerLookAtPacket.java
@@ -14,9 +14,9 @@ public class ClientboundPlayerLookAtPacket implements Packet<ClientGamePacketLis
     public static final StreamCodec<FriendlyByteBuf, ClientboundPlayerLookAtPacket> STREAM_CODEC = Packet.codec(
         ClientboundPlayerLookAtPacket::write, ClientboundPlayerLookAtPacket::new
     );
-    private final double x;
+    public final double x; // Abomination
     private final double y;
-    private final double z;
+    public final double z; // Abomination
     private final int entity;
     private final EntityAnchorArgument.Anchor fromAnchor;
     private final EntityAnchorArgument.Anchor toAnchor;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 1a37654aff9a9c86c9f7af10a1cf721371f0c5ec..91315af0d84c238dc2645d11774bc536447f1dee 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -100,4 +100,19 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         }
 
     }
+
+    // Abomination start
+    public java.util.List<int[]> getAllBlockEntityCoordinatesXZ() {
+        java.util.List<int[]> coordinates = new java.util.ArrayList<>();
+        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+
+        for (short position : this.positions) {
+            int x = this.sectionPos.relativeToBlockX(position);
+            int z = this.sectionPos.relativeToBlockZ(position);
+            coordinates.add(new int[]{x, z});
+        }
+
+        return coordinates;
+    }
+    // Abomination end
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
index 2277cccdf65a2b382a3763afd34b92b895893666..e38260009c101aea72374d8d51dcfcd0dfcef188 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDefaultSpawnPositionPacket.java
@@ -14,6 +14,7 @@ public class ClientboundSetDefaultSpawnPositionPacket implements Packet<ClientGa
     private final float angle;
 
     public ClientboundSetDefaultSpawnPositionPacket(BlockPos pos, float angle) {
+        if (abomination.config.CoordExploitFirewall.options.getDisableClientboundSetDefaultSpawnPositionPacket()) pos = new BlockPos(0, 60, 0); // Abomination
         this.pos = pos;
         this.angle = angle;
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 878e4a321de3168d0ed1eea22a0444ad5a4527b1..aa7ee99b186353b154415aaa4e6aedc8b8164099 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -308,6 +308,8 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     private ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData chunkLoader;
     private final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder viewDistanceHolder = new ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.ViewDistanceHolder();
 
+    public it.unimi.dsi.fastutil.longs.LongOpenHashSet packetFirewallValidCoords = null; // Abomination
+
     @Override
     public final boolean moonrise$isRealPlayer() {
         return this.isRealPlayer;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 5ff10164c458dc628046f1e4aaa6ea1711a1a990..1bb35ed1b3a15c4d28181185831cf17d974f9e57 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -513,6 +513,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleMoveVehicle(ServerboundMoveVehiclePacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (ServerGamePacketListenerImpl.containsInvalidValues(packet.getX(), packet.getY(), packet.getZ(), packet.getYRot(), packet.getXRot())) {
             this.disconnect((Component) Component.translatable("multiplayer.disconnect.invalid_vehicle_movement"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_VEHICLE_MOVEMENT); // Paper - kick event cause
@@ -920,6 +921,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleSetCommandBlock(ServerboundSetCommandBlockPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (!this.server.isCommandBlockEnabled()) {
             this.player.sendSystemMessage(Component.translatable("advMode.notEnabled"));
@@ -1068,6 +1070,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleSetStructureBlock(ServerboundSetStructureBlockPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.canUseGameMasterBlocks()) {
             BlockPos blockposition = packet.getPos();
@@ -1126,6 +1129,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleSetJigsawBlock(ServerboundSetJigsawBlockPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.canUseGameMasterBlocks()) {
             BlockPos blockposition = packet.getPos();
@@ -1151,6 +1155,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleJigsawGenerate(ServerboundJigsawGeneratePacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.canUseGameMasterBlocks()) {
             BlockPos blockposition = packet.getPos();
@@ -1354,6 +1359,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleMovePlayer(ServerboundMovePlayerPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (ServerGamePacketListenerImpl.containsInvalidValues(packet.getX(0.0D), packet.getY(0.0D), packet.getZ(0.0D), packet.getYRot(0.0F), packet.getXRot(0.0F))) {
             this.disconnect((Component) Component.translatable("multiplayer.disconnect.invalid_player_movement"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PLAYER_MOVEMENT); // Paper - kick event cause
@@ -1824,6 +1830,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handlePlayerAction(ServerboundPlayerActionPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         BlockPos blockposition = packet.getPos();
@@ -1958,6 +1965,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleUseItemOn(ServerboundUseItemOnPacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         if (!this.checkLimit(packet.timestamp)) return; // Spigot - check limit
@@ -3547,6 +3555,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
 
     @Override
     public void handleSignUpdate(ServerboundSignUpdatePacket packet) {
+        if (!abomination.PacketFirewall.serverboundFirewall(packet, this.player)) return; // Abomination
         // Paper start - Limit client sign length
         String[] lines = packet.getLines();
         for (int i = 0; i < lines.length; ++i) {
